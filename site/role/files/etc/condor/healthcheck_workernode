#!/usr/bin/env python
from __future__ import division, print_function
import logging
import multiprocessing
import os
import subprocess
import sys


LOG_FILE = "/var/log/condor/healthcheck_workernode.log"
SINGULARITY_CONFIG = "/etc/singularity/singularity.conf"
logging.basicConfig(filename=LOG_FILE, level=logging.DEBUG)


def _singularity_bind_paths(config_path):
    bind_paths = []
    with open(config_path, "r") as f:
        for line in f.readlines():
            if line.startswith('bind path'):
                path = line.split('=')[-1]
                path = path.strip()
                bind_paths.append(path)
    return bind_paths


def _check_path(path):
    is_good = os.path.exists(path)
    if os.path.isdir(path):
        number_of_files = len(os.listdir(path))
        # no empty directories allowed
        is_good = is_good and number_of_files > 0
    return is_good


def check_singularity_bind_paths():
    global SINGULARITY_CONFIG
    singularity_bind_paths = _singularity_bind_paths(SINGULARITY_CONFIG)
    check_paths = []
    for path in singularity_bind_paths:
        is_good = _check_path(path)
        check_paths.append(is_good)
        logging.debug("Path %s passes tests: %s", path, is_good)
        if not is_good:
            logging.error("Path %s is not good", path)
    return all(check_paths)


def check_unprivileged_namespaces():
    command = [
        "/cvmfs/oasis.opensciencegrid.org/mis/singularity/bin/singularity",
        "exec", "--contain", "--ipc", "--pid", "--bind", "/cvmfs",
        "/cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo-el7:latest",
        "ps", "-ef"
    ]
    process = subprocess.Popen(
        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return_code = process.returncode
    is_good = return_code == 0
    if not is_good:
        logging.error("Cannot execute singularity: \n %s \n %s",
                      stdout, stderr)
    return is_good


def check_load():
    cpu_count = multiprocessing.cpu_count()
    load = sum(os.getloadavg()) / 3
    is_good = cpu_count > load
    logging.debug("Checking System load (%f) and CPU count (%d)",
                  load, cpu_count)
    if not is_good:
        logging.warning(
            "System load (%f) is higher than CPU count (%d)", load, cpu_count)
    return cpu_count > load


def _read_memory_stats():
    with open('/proc/meminfo', 'r') as f:
        for line in f.readlines():
            if 'MemTotal' in line:
                x = line.split()
                memTotal = int(x[1])

            if 'Buffers' in line:
                x = line.split()
                buffers = int(x[1])

            if 'Cached' in line and 'SwapCached' not in line:
                x = line.split()
                cached = int(x[1])

            if 'MemFree' in line:
                x = line.split()
                memFree = int(x[1])
    return (memTotal, buffers, cached, memFree)


def check_memory():
    mem_total, _, _, mem_free = _read_memory_stats()
    mem_total_GB = mem_total/1024/1024
    mem_free_GB = mem_free/1024/1024

    is_good = mem_free_GB > 0.1  # at least 100 MB free
    if not is_good:
        logging.warning(
            "Only %f out of %f GB of RAM left", mem_free_GB, mem_total_GB)

    return is_good


def _report_and_exit(msg, status):
    print("NODE_IS_HEALTHY =", status)
    print("NODE_STATUS = \"{0}\"".format(msg))

    exit_code = int(not status)  # 0 if OK, 1 if not
    sys.exit(exit_code)


def main():
    health_msg = "All OK"
    health_status = True

    singularity_checks = check_singularity_bind_paths()
    if not singularity_checks:
        health_msg = "Not all singularity bind paths are OK."
        health_status = False

    singularity_checks = check_unprivileged_namespaces()
    if not singularity_checks:
        health_msg = "Unprivileged namespaces are not enabled"
        health_status = False

    load_checks = check_load()
    if not load_checks:
        health_msg = "CPU load is too high!"
        health_status = False

    memory_checks = check_memory()
    if not memory_checks:
        health_msg = "Not enough memory to start new jobs!"
        health_status = False

    _report_and_exit(health_msg, health_status)


if __name__ == "__main__":
    main()
